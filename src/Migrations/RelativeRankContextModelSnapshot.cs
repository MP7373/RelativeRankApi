// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RelativeRank.Data;

namespace RelativeRank.Migrations
{
    [DbContext(typeof(RelativeRankContext))]
    partial class RelativeRankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RelativeRank.EntityFrameworkEntities.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("shows");
                });

            modelBuilder.Entity("RelativeRank.EntityFrameworkEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("Password")
                        .HasColumnName("password")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnName("password_salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("RelativeRank.EntityFrameworkEntities.UserToShowMapping", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("integer")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int>("ShowId")
                        .HasColumnName("showid")
                        .HasColumnType("integer")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ShowId");

                    b.HasIndex("ShowId");

                    b.HasIndex("UserId", "Rank")
                        .IsUnique()
                        .HasName("uq_rank_unique_to_user");

                    b.ToTable("user_to_show_mapping");
                });

            modelBuilder.Entity("RelativeRank.EntityFrameworkEntities.UserToShowMapping", b =>
                {
                    b.HasOne("RelativeRank.EntityFrameworkEntities.Show", "ShowNavigation")
                        .WithMany("UserToShowMapping")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelativeRank.EntityFrameworkEntities.User", "UserNavigation")
                        .WithMany("UserToShowMapping")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
